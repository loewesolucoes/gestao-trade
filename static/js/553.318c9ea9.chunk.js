(()=>{"use strict";class e{static _init(){e.broadcastSend.onmessage=s=>{e.onMessages.forEach((e=>e(s)))},e.broadcastSend.onmessageerror=e=>{console.error("DBWorkerUtil.onmessageerror",e)},e.broadcastReceive.onmessage=e=>{const{id:s}=e.data,a=this.onExecMessages[s];if(null==a)throw console.error("invalid message id",s,e),new Error("invalid message id => ".concat(s));a(e),delete this.onExecMessages[s]},e.broadcastReceive.onmessageerror=e=>{console.error("DBWorkerUtil.onmessageerror",e)}}constructor(e){this.workerName=e,this.currentId=0}static setOnMessage(e){this.onMessages.push(e)}static postReceive(s){e.broadcastReceive.postMessage(s.data)}async exec(s,a){const o="sw-".concat(this.workerName,"-").concat(this.currentId++);return new Promise(((r,t)=>{e.onExecMessages[o]=e=>{console.debug("DBWorkerUtil.onmessage",e.data.id,o,e),e.data.id===o&&(e.data.error?t(e.data):r(e.data.results))},console.debug("DBWorkerUtil.sending","exec",o,s,a),e.broadcastSend.postMessage({id:o,action:"exec",sql:s,params:a})}))}}e.broadcastSend=new BroadcastChannel("gestao-database-channel-send"),e.broadcastReceive=new BroadcastChannel("gestao-database-channel-receive"),e.onMessages=[],e.onExecMessages={},e._init(),console.log("database-broadcast-worker start");const s=new Worker("".concat("/gestao-trade","/worker.sql-wasm.js"));e.setOnMessage((e=>{console.debug("database-broadcast.onmessage",e),s.postMessage(e.data)})),s.onerror=e=>console.error("Database worker error: ",e),s.onmessage=s=>{var a;console.debug("database-broadcast.onmessage",s),null!==(a=s.data.id)&&void 0!==a&&a.startsWith("sw-")?e.postReceive(s):self.postMessage(s.data)},self.onmessage=e=>{console.debug("database.onmessage",e),s.postMessage(e.data)},console.log("database-broadcast-worker end")})();
//# sourceMappingURL=553.318c9ea9.chunk.js.map