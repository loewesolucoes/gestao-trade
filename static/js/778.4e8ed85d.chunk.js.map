{"version":3,"file":"static/js/778.4e8ed85d.chunk.js","mappings":"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","sources":["workers/worker-database.ts","workers/database-broadcast.ts"],"sourcesContent":["import { IDatabase } from \"../repositories/database\";\r\n\r\nconst pageUUID = crypto.randomUUID();\r\n\r\nconst DB_CHANNEL_SEND = `gestao-database-channel-send-${pageUUID}`;\r\nconst DB_CHANNEL_RECEIVE = `gestao-database-channel-receive-${pageUUID}`;\r\n\r\nexport class WorkerDatabase implements IDatabase {\r\n  private static readonly broadcastSend: BroadcastChannel = new BroadcastChannel(DB_CHANNEL_SEND);\r\n  private static readonly broadcastReceive: BroadcastChannel = new BroadcastChannel(DB_CHANNEL_RECEIVE);\r\n  private static readonly onMessages: ((event: MessageEvent) => void)[] = [];\r\n  private static readonly onExecMessages: { [key: string]: (event: MessageEvent) => void } = {};\r\n  private currentId = 0;\r\n\r\n  public static _init() {\r\n    WorkerDatabase.broadcastSend.onmessage = (event) => {\r\n      WorkerDatabase.onMessages.forEach(x => x(event));\r\n    }\r\n\r\n    WorkerDatabase.broadcastSend.onmessageerror = (event) => {\r\n      console.error('WorkerDatabase.onmessageerror', event);\r\n    }\r\n\r\n    WorkerDatabase.broadcastReceive.onmessage = (event) => {\r\n      const { id } = event.data;\r\n      const action = this.onExecMessages[id];\r\n\r\n      if (action == null) {\r\n        console.error('invalid message id', id, event);\r\n\r\n        return;\r\n      }\r\n\r\n      action(event);\r\n      delete this.onExecMessages[id];\r\n    }\r\n\r\n    WorkerDatabase.broadcastReceive.onmessageerror = (event) => {\r\n      console.error('WorkerDatabase.onmessageerror', event);\r\n    }\r\n  }\r\n\r\n  constructor(private workerName: string) { }\r\n\r\n  public static setOnMessage(action: (e: MessageEvent) => void) {\r\n    this.onMessages.push(action);\r\n  }\r\n\r\n  public static postReceive(event: MessageEvent) {\r\n    WorkerDatabase.broadcastReceive.postMessage(event.data);\r\n  }\r\n\r\n  public async exec(sql: string, params?: any): Promise<initSqlJs.QueryExecResult[]> {\r\n    const nextId = `sw-${this.workerName}-exec-${this.currentId++}`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      WorkerDatabase.onExecMessages[nextId] = event => {\r\n        console.debug('WorkerDatabase.onmessage', event.data.id, nextId, event);\r\n\r\n        if (event.data.id === nextId) {\r\n          if (event.data.error)\r\n            reject(event.data);\r\n          else\r\n            resolve(event.data.results);\r\n        }\r\n      };\r\n\r\n      console.debug('WorkerDatabase.sending', 'exec', nextId, sql, params);\r\n\r\n      WorkerDatabase.broadcastSend.postMessage({\r\n        id: nextId,\r\n        action: \"exec\",\r\n        sql: sql,\r\n        params: params\r\n      });\r\n    });\r\n  }\r\n\r\n  public async export(): Promise<Uint8Array> {\r\n    const nextId = `sw-${this.workerName}-export-${this.currentId++}`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      WorkerDatabase.onExecMessages[nextId] = event => {\r\n        console.debug('WorkerDatabase.onmessage', event.data.id, nextId, event);\r\n\r\n        if (event.data.id === nextId) {\r\n          if (event.data.error)\r\n            reject(event.data);\r\n          else\r\n            resolve(event.data.buffer);\r\n        }\r\n      };\r\n\r\n      console.debug('WorkerDatabase.sending', 'export', nextId);\r\n\r\n      WorkerDatabase.broadcastSend.postMessage({\r\n        id: nextId,\r\n        action: \"export\",\r\n      });\r\n    });\r\n  }\r\n\r\n  public async open(data?: Buffer | ArrayLike<number> | null | undefined): Promise<any> {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n}\r\n\r\nWorkerDatabase._init();","import { GestaoMessage } from \"./common\";\r\nimport { WorkerDatabase } from \"./worker-database\";\r\n\r\nconsole.debug('database-broadcast-worker start');\r\n\r\nconst worker = new Worker(process.env.NODE_ENV === 'development' ? `${process.env.PUBLIC_URL}/worker.sql-wasm-debug.js` : `${process.env.PUBLIC_URL}/worker.sql-wasm.js`);\r\n// const worker = new Worker((new URL(\"sql.js/dist/worker.sql-wasm.js\", import.meta.url)));\r\n\r\nWorkerDatabase.setOnMessage(event => {\r\n  console.debug('database-broadcast.setOnMessage', event);\r\n\r\n  worker.postMessage(event.data);\r\n})\r\n\r\n/* eslint-disable no-restricted-globals */\r\n\r\nworker.onerror = e => console.error(\"Database worker error: \", e);\r\nworker.onmessage = (event) => {\r\n  console.debug('database-broadcast.onmessage', event);\r\n\r\n  if (event.data.id?.startsWith('sw-')) {\r\n    WorkerDatabase.postReceive(event);\r\n  } else {\r\n    self.postMessage(event.data);\r\n  }\r\n}\r\n\r\nself.onmessage = (event: MessageEvent<GestaoMessage>) => {\r\n  console.debug('database.onmessage', event);\r\n\r\n  worker.postMessage(event.data);\r\n};\r\n\r\nconsole.debug('database-broadcast-worker end');\r\n\r\nexport { };\r\n"],"names":["pageUUID","crypto","randomUUID","DB_CHANNEL_SEND","concat","DB_CHANNEL_RECEIVE","WorkerDatabase","_init","broadcastSend","onmessage","event","onMessages","forEach","x","onmessageerror","console","error","broadcastReceive","id","data","action","this","onExecMessages","constructor","workerName","currentId","setOnMessage","push","postReceive","postMessage","exec","sql","params","nextId","Promise","resolve","reject","debug","results","export","buffer","open","Error","BroadcastChannel","worker","Worker","process","onerror","e","_event$data$id","startsWith","self"],"sourceRoot":""}