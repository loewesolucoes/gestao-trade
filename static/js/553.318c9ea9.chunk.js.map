{"version":3,"file":"static/js/553.318c9ea9.chunk.js","mappings":"mBAEO,MAAMA,EAOX,YAAcC,GACZD,EAAaE,cAAcC,UAAaC,IACtCJ,EAAaK,WAAWC,SAAQC,GAAKA,EAAEH,IAAO,EAGhDJ,EAAaE,cAAcM,eAAkBJ,IAC3CK,QAAQC,MAAM,8BAA+BN,EAAM,EAGrDJ,EAAaW,iBAAiBR,UAAaC,IACzC,MAAM,GAAEQ,GAAOR,EAAMS,KACfC,EAASC,KAAKC,eAAeJ,GAEnC,GAAc,MAAVE,EAGF,MAFAL,QAAQC,MAAM,qBAAsBE,EAAIR,GAElC,IAAIa,MAAM,yBAADC,OAA0BN,IAG3CE,EAAOV,UACAW,KAAKC,eAAeJ,EAAG,EAGhCZ,EAAaW,iBAAiBH,eAAkBJ,IAC9CK,QAAQC,MAAM,8BAA+BN,EAAM,CAEvD,CAEAe,WAAAA,CAAoBC,GAAqB,KAArBA,WAAAA,EAAkB,KA9B9BC,UAAY,CA8BsB,CAE1C,mBAAcC,CAAaR,GACzBC,KAAKV,WAAWkB,KAAKT,EACvB,CAEA,kBAAcU,CAAYpB,GACxBJ,EAAaW,iBAAiBc,YAAYrB,EAAMS,KAClD,CAEA,UAAaa,CAAKC,EAAaC,GAC7B,MAAMC,EAAM,MAAAX,OAASH,KAAKK,WAAU,KAAAF,OAAIH,KAAKM,aAE7C,OAAO,IAAIS,SAAQ,CAACC,EAASC,KAC3BhC,EAAagB,eAAea,GAAUzB,IACpCK,QAAQwB,MAAM,yBAA0B7B,EAAMS,KAAKD,GAAIiB,EAAQzB,GAE3DA,EAAMS,KAAKD,KAAOiB,IAChBzB,EAAMS,KAAKH,MACbsB,EAAO5B,EAAMS,MAEbkB,EAAQ3B,EAAMS,KAAKqB,SACvB,EAGFzB,QAAQwB,MAAM,uBAAwB,OAAQJ,EAAQF,EAAKC,GAE3D5B,EAAaE,cAAcuB,YAAY,CACrCb,GAAIiB,EACJf,OAAQ,OACRa,IAAKA,EACLC,OAAQA,GACR,GAEN,EArEW5B,EACaE,cAAkC,IAAIiC,iBCUjC,gCDXlBnC,EAEaW,iBAAqC,IAAIwB,iBCUjC,mCDZrBnC,EAGaK,WAAgD,GAH7DL,EAIagB,eAAmE,CAAC,EAoE9FhB,EAAaC,QEvEbQ,QAAQ2B,IAAI,mCAEZ,MAAMC,EAAS,IAAIC,OAAO,GAADpB,OAAIqB,gBAAsB,wBAEnDvC,EAAasB,cAAalB,IACxBK,QAAQwB,MAAM,+BAAgC7B,GAE9CiC,EAAOZ,YAAYrB,EAAMS,KAAK,IAKhCwB,EAAOG,QAAUC,GAAKhC,QAAQC,MAAM,0BAA2B+B,GAC/DJ,EAAOlC,UAAaC,IAAW,IAADsC,EAC5BjC,QAAQwB,MAAM,+BAAgC7B,GAE7B,QAAjBsC,EAAItC,EAAMS,KAAKD,UAAE,IAAA8B,GAAbA,EAAeC,WAAW,OAC5B3C,EAAawB,YAAYpB,GAEzBwC,KAAKnB,YAAYrB,EAAMS,KACzB,EAGF+B,KAAKzC,UAAaC,IAChBK,QAAQwB,MAAM,qBAAsB7B,GAEpCiC,EAAOZ,YAAYrB,EAAMS,KAAK,EAGhCJ,QAAQ2B,IAAI,gC","sources":["workers/db-worker-util.ts","workers/common.ts","workers/database-broadcast.ts"],"sourcesContent":["import { DB_CHANNEL_RECEIVE, DB_CHANNEL_SEND } from \"./common\";\r\n\r\nexport class DBWorkerUtil {\r\n  private static readonly broadcastSend: BroadcastChannel = new BroadcastChannel(DB_CHANNEL_SEND);\r\n  private static readonly broadcastReceive: BroadcastChannel = new BroadcastChannel(DB_CHANNEL_RECEIVE);\r\n  private static readonly onMessages: ((event: MessageEvent) => void)[] = [];\r\n  private static readonly onExecMessages: { [key: string]: (event: MessageEvent) => void } = {};\r\n  private currentId = 0;\r\n\r\n  public static _init() {\r\n    DBWorkerUtil.broadcastSend.onmessage = (event) => {\r\n      DBWorkerUtil.onMessages.forEach(x => x(event));\r\n    }\r\n\r\n    DBWorkerUtil.broadcastSend.onmessageerror = (event) => {\r\n      console.error('DBWorkerUtil.onmessageerror', event);\r\n    }\r\n\r\n    DBWorkerUtil.broadcastReceive.onmessage = (event) => {\r\n      const { id } = event.data;\r\n      const action = this.onExecMessages[id];\r\n\r\n      if (action == null) {\r\n        console.error('invalid message id', id, event);\r\n\r\n        throw new Error(`invalid message id => ${id}`);\r\n      }\r\n\r\n      action(event);\r\n      delete this.onExecMessages[id];\r\n    }\r\n\r\n    DBWorkerUtil.broadcastReceive.onmessageerror = (event) => {\r\n      console.error('DBWorkerUtil.onmessageerror', event);\r\n    }\r\n  }\r\n\r\n  constructor(private workerName: string) { }\r\n\r\n  public static setOnMessage(action: (e: MessageEvent) => void) {\r\n    this.onMessages.push(action);\r\n  }\r\n\r\n  public static postReceive(event: MessageEvent) {\r\n    DBWorkerUtil.broadcastReceive.postMessage(event.data);\r\n  }\r\n\r\n  public async exec(sql: string, params?: any): Promise<initSqlJs.QueryExecResult[]> {\r\n    const nextId = `sw-${this.workerName}-${this.currentId++}`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      DBWorkerUtil.onExecMessages[nextId] = event => {\r\n        console.debug('DBWorkerUtil.onmessage', event.data.id, nextId, event);\r\n\r\n        if (event.data.id === nextId) {\r\n          if (event.data.error)\r\n            reject(event.data);\r\n          else\r\n            resolve(event.data.results);\r\n        }\r\n      };\r\n\r\n      console.debug('DBWorkerUtil.sending', 'exec', nextId, sql, params);\r\n\r\n      DBWorkerUtil.broadcastSend.postMessage({\r\n        id: nextId,\r\n        action: \"exec\",\r\n        sql: sql,\r\n        params: params\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nDBWorkerUtil._init();","export enum WorkersActions {\r\n  LOAD_ALL = \"loadAll\",\r\n  CONNECT = \"connect\",\r\n}\r\n\r\n\r\nexport interface GestaoMessage {\r\n  id: number;\r\n  action: WorkersActions;\r\n  params: any;\r\n}\r\n\r\n\r\nexport const DB_CHANNEL_SEND = 'gestao-database-channel-send';\r\nexport const DB_CHANNEL_RECEIVE = 'gestao-database-channel-receive';","import { GestaoMessage } from \"./common\";\r\nimport { DBWorkerUtil } from \"./db-worker-util\";\r\n\r\nconsole.log('database-broadcast-worker start');\r\n\r\nconst worker = new Worker(`${process.env.PUBLIC_URL}/worker.sql-wasm.js`);\r\n\r\nDBWorkerUtil.setOnMessage(event => {\r\n  console.debug('database-broadcast.onmessage', event);\r\n\r\n  worker.postMessage(event.data);\r\n})\r\n\r\n/* eslint-disable no-restricted-globals */\r\n\r\nworker.onerror = e => console.error(\"Database worker error: \", e);\r\nworker.onmessage = (event) => {\r\n  console.debug('database-broadcast.onmessage', event);\r\n\r\n  if (event.data.id?.startsWith('sw-')) {\r\n    DBWorkerUtil.postReceive(event);\r\n  } else {\r\n    self.postMessage(event.data);\r\n  }\r\n}\r\n\r\nself.onmessage = (event: MessageEvent<GestaoMessage>) => {\r\n  console.debug('database.onmessage', event);\r\n\r\n  worker.postMessage(event.data);\r\n};\r\n\r\nconsole.log('database-broadcast-worker end');\r\n\r\nexport { };\r\n"],"names":["DBWorkerUtil","_init","broadcastSend","onmessage","event","onMessages","forEach","x","onmessageerror","console","error","broadcastReceive","id","data","action","this","onExecMessages","Error","concat","constructor","workerName","currentId","setOnMessage","push","postReceive","postMessage","exec","sql","params","nextId","Promise","resolve","reject","debug","results","BroadcastChannel","log","worker","Worker","process","onerror","e","_event$data$id","startsWith","self"],"sourceRoot":""}