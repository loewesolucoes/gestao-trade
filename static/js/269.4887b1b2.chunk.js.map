{"version":3,"file":"static/js/269.4887b1b2.chunk.js","mappings":"mBAAO,IAAKA,EAAc,SAAdA,GAAc,OAAdA,EAAc,mBAAdA,EAAc,kBAAdA,CAAc,MCEnB,MAAMC,EAOX,YAAcC,GACZD,EAAaE,cAAcC,UAAaC,IACtCJ,EAAaK,WAAWC,SAAQC,GAAKA,EAAEH,IAAO,EAGhDJ,EAAaE,cAAcM,eAAkBJ,IAC3CK,QAAQC,MAAM,8BAA+BN,EAAM,EAGrDJ,EAAaW,iBAAiBR,UAAaC,IACzC,MAAM,GAAEQ,GAAOR,EAAMS,KACfC,EAASC,KAAKC,eAAeJ,GAEnC,GAAc,MAAVE,EAGF,MAFAL,QAAQC,MAAM,qBAAsBE,EAAIR,GAElC,IAAIa,MAAM,yBAADC,OAA0BN,IAG3CE,EAAOV,UACAW,KAAKC,eAAeJ,EAAG,EAGhCZ,EAAaW,iBAAiBH,eAAkBJ,IAC9CK,QAAQC,MAAM,8BAA+BN,EAAM,CAEvD,CAEAe,WAAAA,CAAoBC,GAAqB,KAArBA,WAAAA,EAAkB,KA9B9BC,UAAY,CA8BsB,CAE1C,mBAAcC,CAAaR,GACzBC,KAAKV,WAAWkB,KAAKT,EACvB,CAEA,kBAAcU,CAAYpB,GACxBJ,EAAaW,iBAAiBc,YAAYrB,EAAMS,KAClD,CAEA,UAAaa,CAAKC,EAAaC,GAC7B,MAAMC,EAAM,MAAAX,OAASH,KAAKK,WAAU,KAAAF,OAAIH,KAAKM,aAE7C,OAAO,IAAIS,SAAQ,CAACC,EAASC,KAC3BhC,EAAagB,eAAea,GAAUzB,IACpCK,QAAQwB,MAAM,yBAA0B7B,EAAMS,KAAKD,GAAIiB,EAAQzB,GAE3DA,EAAMS,KAAKD,KAAOiB,IAChBzB,EAAMS,KAAKH,MACbsB,EAAO5B,EAAMS,MAEbkB,EAAQ3B,EAAMS,KAAKqB,SACvB,EAGFzB,QAAQwB,MAAM,uBAAwB,OAAQJ,EAAQF,EAAKC,GAE3D5B,EAAaE,cAAcuB,YAAY,CACrCb,GAAIiB,EACJf,OAAQ,OACRa,IAAKA,EACLC,OAAQA,GACR,GAEN,EArEW5B,EACaE,cAAkC,IAAIiC,iBDUjC,gCCXlBnC,EAEaW,iBAAqC,IAAIwB,iBDUjC,mCCZrBnC,EAGaK,WAAgD,GAH7DL,EAIagB,eAAmE,CAAC,EAoE9FhB,EAAaC,QCtEbQ,QAAQwB,MAAM,sBAEd,MAAMG,EAAW,IAAIpC,EAAa,SAElCqC,KAAKlC,UAAaC,IAGhB,GAFAK,QAAQwB,MAAM,kBAAmB7B,GAEzBA,EAAMS,KAAKC,SACZf,EAAeuC,UAMxBC,eAAuB1B,GACrB,MAAM2B,QAAYC,MAAM,qCAElB,OAAEC,SAAkBF,EAAIG,OAExBC,EAAgBF,EAAOG,KAAItC,IAAC,CAChCuC,KAAMvC,EAAEwC,KACRC,OAAQzC,EAAE0C,MACVC,KAAkB,MAAZ3C,EAAE4C,OAAiB,EAAI,EAC7BC,QAAQ,EACRC,eAAgB9C,EAAE+C,WAClBC,KAAMhD,EAAEgD,KACRC,MAAOjD,EAAE4C,WAGLM,QAAcrB,EAASV,KAAK,uBAElCjB,QAAQiD,IAAID,GAEZpB,KAAKZ,YAAY,CAAEb,GAAIC,EAAKD,GAAI+C,SAAUf,GAC5C,CAzBMgB,CAAQxD,EAAMS,KAElB,EAyBFJ,QAAQwB,MAAM,mB","sources":["workers/common.ts","workers/db-worker-util.ts","workers/brapi.ts"],"sourcesContent":["export enum WorkersActions {\r\n  LOAD_ALL = \"loadAll\",\r\n  CONNECT = \"connect\",\r\n}\r\n\r\n\r\nexport interface GestaoMessage {\r\n  id: number;\r\n  action: WorkersActions;\r\n  params: any;\r\n}\r\n\r\n\r\nexport const DB_CHANNEL_SEND = 'gestao-database-channel-send';\r\nexport const DB_CHANNEL_RECEIVE = 'gestao-database-channel-receive';","import { DB_CHANNEL_RECEIVE, DB_CHANNEL_SEND } from \"./common\";\r\n\r\nexport class DBWorkerUtil {\r\n  private static readonly broadcastSend: BroadcastChannel = new BroadcastChannel(DB_CHANNEL_SEND);\r\n  private static readonly broadcastReceive: BroadcastChannel = new BroadcastChannel(DB_CHANNEL_RECEIVE);\r\n  private static readonly onMessages: ((event: MessageEvent) => void)[] = [];\r\n  private static readonly onExecMessages: { [key: string]: (event: MessageEvent) => void } = {};\r\n  private currentId = 0;\r\n\r\n  public static _init() {\r\n    DBWorkerUtil.broadcastSend.onmessage = (event) => {\r\n      DBWorkerUtil.onMessages.forEach(x => x(event));\r\n    }\r\n\r\n    DBWorkerUtil.broadcastSend.onmessageerror = (event) => {\r\n      console.error('DBWorkerUtil.onmessageerror', event);\r\n    }\r\n\r\n    DBWorkerUtil.broadcastReceive.onmessage = (event) => {\r\n      const { id } = event.data;\r\n      const action = this.onExecMessages[id];\r\n\r\n      if (action == null) {\r\n        console.error('invalid message id', id, event);\r\n\r\n        throw new Error(`invalid message id => ${id}`);\r\n      }\r\n\r\n      action(event);\r\n      delete this.onExecMessages[id];\r\n    }\r\n\r\n    DBWorkerUtil.broadcastReceive.onmessageerror = (event) => {\r\n      console.error('DBWorkerUtil.onmessageerror', event);\r\n    }\r\n  }\r\n\r\n  constructor(private workerName: string) { }\r\n\r\n  public static setOnMessage(action: (e: MessageEvent) => void) {\r\n    this.onMessages.push(action);\r\n  }\r\n\r\n  public static postReceive(event: MessageEvent) {\r\n    DBWorkerUtil.broadcastReceive.postMessage(event.data);\r\n  }\r\n\r\n  public async exec(sql: string, params?: any): Promise<initSqlJs.QueryExecResult[]> {\r\n    const nextId = `sw-${this.workerName}-${this.currentId++}`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      DBWorkerUtil.onExecMessages[nextId] = event => {\r\n        console.debug('DBWorkerUtil.onmessage', event.data.id, nextId, event);\r\n\r\n        if (event.data.id === nextId) {\r\n          if (event.data.error)\r\n            reject(event.data);\r\n          else\r\n            resolve(event.data.results);\r\n        }\r\n      };\r\n\r\n      console.debug('DBWorkerUtil.sending', 'exec', nextId, sql, params);\r\n\r\n      DBWorkerUtil.broadcastSend.postMessage({\r\n        id: nextId,\r\n        action: \"exec\",\r\n        sql: sql,\r\n        params: params\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nDBWorkerUtil._init();","import { DB_CHANNEL_SEND, GestaoMessage, WorkersActions } from \"./common\";\r\nimport { DBWorkerUtil } from \"./db-worker-util\";\r\n\r\n/* eslint-disable no-restricted-globals */\r\nconsole.debug('brapi-worker start');\r\n\r\nconst dbWorker = new DBWorkerUtil('brapi');\r\n\r\nself.onmessage = (event: MessageEvent<GestaoMessage>) => {\r\n  console.debug('brapi.onmessage', event);\r\n\r\n  switch (event.data.action) {\r\n    case WorkersActions.LOAD_ALL: {\r\n      loadAll(event.data);\r\n    }\r\n  }\r\n};\r\n\r\nasync function loadAll(data: GestaoMessage) {\r\n  const res = await fetch('https://brapi.dev/api/quote/list')\r\n\r\n  const { stocks } = (await res.json() as BrapiResponse);\r\n\r\n  const acoesResponse = stocks.map(x => ({\r\n    nome: x.name,\r\n    codigo: x.stock,\r\n    tipo: x.sector != null ? 1 : 4, // TODO: Add enum\r\n    active: true,\r\n    valorDeMercado: x.market_cap,\r\n    logo: x.logo,\r\n    setor: x.sector,\r\n  }))\r\n\r\n  const acoes = await dbWorker.exec('select * from acoes');\r\n\r\n  console.log(acoes);\r\n\r\n  self.postMessage({ id: data.id, response: acoesResponse });\r\n}\r\n\r\nconsole.debug('brapi-worker end');\r\n\r\nexport { };\r\n\r\nexport interface BrapiResponse {\r\n  indexes: BrapiIndex[];\r\n  stocks: BrapiStock[];\r\n  availableSectors: BrapiSector[];\r\n  availableStockTypes: BrapiType[];\r\n}\r\n\r\nexport enum BrapiSector {\r\n  CommercialServices = \"Commercial Services\",\r\n  Communications = \"Communications\",\r\n  ConsumerDurables = \"Consumer Durables\",\r\n  ConsumerNonDurables = \"Consumer Non-Durables\",\r\n  ConsumerServices = \"Consumer Services\",\r\n  DistributionServices = \"Distribution Services\",\r\n  ElectronicTechnology = \"Electronic Technology\",\r\n  EnergyMinerals = \"Energy Minerals\",\r\n  Finance = \"Finance\",\r\n  HealthServices = \"Health Services\",\r\n  HealthTechnology = \"Health Technology\",\r\n  IndustrialServices = \"Industrial Services\",\r\n  Miscellaneous = \"Miscellaneous\",\r\n  NonEnergyMinerals = \"Non-Energy Minerals\",\r\n  ProcessIndustries = \"Process Industries\",\r\n  ProducerManufacturing = \"Producer Manufacturing\",\r\n  RetailTrade = \"Retail Trade\",\r\n  TechnologyServices = \"Technology Services\",\r\n  Transportation = \"Transportation\",\r\n  Utilities = \"Utilities\",\r\n}\r\n\r\nexport enum BrapiType {\r\n  Bdr = \"bdr\",\r\n  Fund = \"fund\",\r\n  Stock = \"stock\",\r\n}\r\n\r\nexport interface BrapiIndex {\r\n  stock: string;\r\n  name: string;\r\n}\r\n\r\nexport interface BrapiStock {\r\n  stock: string;\r\n  name: string;\r\n  close: number;\r\n  change: number;\r\n  volume: number;\r\n  market_cap: number | null;\r\n  logo: string;\r\n  sector: BrapiSector | null;\r\n  type: BrapiType;\r\n}\r\n"],"names":["WorkersActions","DBWorkerUtil","_init","broadcastSend","onmessage","event","onMessages","forEach","x","onmessageerror","console","error","broadcastReceive","id","data","action","this","onExecMessages","Error","concat","constructor","workerName","currentId","setOnMessage","push","postReceive","postMessage","exec","sql","params","nextId","Promise","resolve","reject","debug","results","BroadcastChannel","dbWorker","self","LOAD_ALL","async","res","fetch","stocks","json","acoesResponse","map","nome","name","codigo","stock","tipo","sector","active","valorDeMercado","market_cap","logo","setor","acoes","log","response","loadAll"],"sourceRoot":""}